
"       _
"__   _(_)_ __ ___  _ __ ___
"\ \ / / | '_ ` _ \| '__/ __|
" \ V /| | | | | | | | | (__
"  \_/ |_|_| |_| |_|_|  \___|


" VUNDLE ----------------------------------------------------------------------------------- {{{
filetype off

" Set the runtime path to include Vundle and initialise
set rtp+=~/.vim/bundle/Vundle.vim

" Download plug-ins to the plugged directory
call vundle#begin('~/.vim/plugged')

" Let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'

call vundle#end()
filetype plugin indent on
" }}}

" SETTINGS --------------------------------------------------------------------------------- {{{
set nocompatible 		" Use vim settings rather than vi

set t_Co=256 			" Enable 256 colours
set nu			        " Enable line numbers
syntax on       	    " Enable syntax highlights
set showmatch

set incsearch		    " Enable incremental search (search
						" updates as you change the query)
set hlsearch		    " Enable searching highlighted text
set ignorecase
set smartcase

set termwinsize=12x0	" Set terminal size (rows)
set splitbelow			" Always split windows below
set splitright			" Always split windows to the right
set mouse=a				" Enable mouse drag on window splits
set nowrap

set tabstop=4		    " How many spaces an indent is
set shiftwidth=4
set expandtab			" Use spaces when tabbing
set paste 				" Do not auto indent when pasting
set pastetoggle=<F3>

set scrolloff=8
set sidescrolloff=8

" Command autocompletion
set wildmenu
set wildmode=list:longest
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

"augroup dynamic_smartcase
"    autocmd!
"    autocmd CmdLineEnter : set nosmartcase
"    autocmd CmdLineLeave : set smartcase
"augroup END

" Make backspace behave normally
set backspace=indent,eol,start
set softtabstop=4

autocmd FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
" set list
" set listchars=
" set listchars+=tab:·\
" set listchars+=trail:·
" set listchars+=extends:»
" set listchars+=precedes:«
" }}}

" KEYBINDINGS ------------------------------------------------------------------------------ {{{
let mapleader = " "

" inoremap ii <Esc>
noremap <leader>t :term<CR>
noremap <leader>m :MinimapToggle<CR>

" noremap <leader>r :Ranger<CR>
" noremap <leader>f :NERDTreeToggle<CR>

noremap <leader>fm :Ranger<CR>
noremap <leader>ft :NERDTreeToggle<CR>
let NERDTreeMinimalUI=1

noremap <C-e> $
noremap <C-a> ^

" tnoremap <Esc> <C-\><C-n>:q!<CR>

" use Space + n to toggle the line number counting method
function! g:ToggleNuMode()
	if &nu == 1
		set nonu   " turn off nu
		set rnu
	else
		set nornu   " turn off rnu
		set nu
	endif
endfunction
nnoremap <silent><leader>n :call g:ToggleNuMode()<CR>
" }}}

" COLOURS ---------------------------------------------------------------------------------- {{{
Plugin 'dracula/vim',{'name':'dracula'}
Plugin 'altercation/vim-colors-solarized',{'name':'solarized'}
Plugin 'bluz71/vim-moonfly-colors',{'name':'moonfly'}
Plugin 'sainnhe/everforest'
Plugin 'dylanaraps/wal.vim',{'name':'wal'}
Plugin 'morhetz/gruvbox',{'name':'gruvbox'}

let g:everforest_background = 'hard'
let g:everforest_better_performance = 1

" if has('termguicolors')
"   set termguicolors
" endif

set background=dark		" Chooses background colour
colorscheme wal

" hi Normal guibg=NONE ctermbg=NONE
" }}}


" PLUGINS ---------------------------------------------------------------------------------- {{{
Plugin 'sheerun/vim-polyglot'						" Syntax highlighting plugin

Plugin 'Xe/lolcode.vim'								" Syntax highlighting for Lolcode

Plugin 'jiangmiao/auto-pairs'						" Automatic pairs or bracets, quotes, etc.
let g:AutoPairsShortcutToggle = '<C-P>'				" Set Ctrl+P to toggle

Plugin 'preservim/nerdtree'							" File tree plugin
let NERDTreeShowHidden=1							" Show hidden files in tree
" autocmd VimEnter * NERDTree | wincmd p				" Open NERDTree when opening Vim, close Vim if only Nerdtree is open
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
													" Use :NERDTree to open the file tree
" autocmd VimEnter * NERDTreeToggle

" Plugin 'ryanoasis/vim-devicons'						" Makes NERDTree show icons
set encoding=UTF-8

" Plugin 'vim-airline/vim-airline'					" Status line

"Plugin 'powerline/powerline'

Plugin 'yggdroot/indentline'						" Shows indentation levels

Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'	" Makes filetree look cooler

Plugin 'severin-lemaignan/vim-minimap'				" Code minimap
													" :Minimap opens,  :MinimapClose closes
" autocmd VimEnter * MinimapToggle

Plugin 'francoiscabrol/ranger.vim'					" Open Ranger with :Ranger

" Plugin 'mhinz/vim-startify'

Plugin 'lilydjwg/colorizer'							" Colorizer plugin

" Plugin 'tpope/vim-fugitive'							" Git wrapper

Plugin 'airblade/vim-gitgutter'						" Shows changes between local and remote

Plugin 'preservim/nerdcommenter'					" Allows easy commenting of code

Plugin 'ervandew/supertab'							" Tab complete
" }}}

" AIRLINE ---------------------------------------------------------------------------------- {{{
"let g:airline_powerline_fonts=1
"
"if !exists('g:airline_symbols')
	"let g:airline_symbols = {}
"endif

"let g:airline_left_sep = ''
"let g:airline_right_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_alt_sep = ''
"let g:airline_symbols.maxlinenr = ''

"let g:airline#extensions#tabline#enabled = 1
" }}}

" STARTIFY --------------------------------------------------------------------------------- {{{
let g:startify_custom_header = [
	\'          _',
	\'   __   _(_)_ _ ____',
	\'   \ \ / / | `_`  _  \',
	\'    \ V /| | | | | | |',
	\'     \_/ |_|_| |_| |_|',
	\'',
	\ ]

let g:startify_list_order = [
    \ ['       Most recently used files in '. getcwd() .':'],
    \ 'dir',
    \ ['       Most recently used files:'],
    \ 'files',
    \ ['       Sessions:'],
    \ 'sessions',
    \ ['       Bookmarks:'],
    \ 'bookmarks',
    \ ]
let g:startify_bookmarks = [ {'v': '~/.vim/vimrc'}, {'s': '~/.config/fish/config.fish'}, {'w': '~/.config/i3/config'}, {'t': '~/.config/alacritty/alacritty.yml'}, {'c': '~/.config/picom.conf'}, {'n': '~/.config/neofetch/config.conf'} ]
let g:startify_files_number = 5
" }}}


fun! Start()
    " Don't run if: we have commandline arguments, we don't have an empty
    " buffer, if we've not invoked as vim or gvim, or if we'e start in insert mode
    if argc() || line2byte('$') != -1 || v:progname !~? '^[-gmnq]\=vim\=x\=\%[\.exe]$' || &insertmode
        return
    endif
    " Start a new buffer ...
    enew
    " ... and set some options for it
    setlocal
        \ bufhidden=wipe
        \ buftype=nofile
        \ nobuflisted
        \ nocursorcolumn
        \ nocursorline
        \ nolist
        \ nonumber
        \ noswapfile
        \ norelativenumber
    " Now we can just write to the buffer, whatever you want.
    call append('$', "")
    let motd = [
        \'  Hello, Ben.',
        \'Welcome to Vim.',
        \ ]
    let maxline=max(map(copy(motd), 'len(v:val)'))
    let space=repeat(' ', (winwidth(0) - maxline)/2)
    call append('$', map(motd, 'space . v:val'))
    let leading=repeat([''], (winheight(0)-len(getline(0, '$')))/2)
    call append('^', leading)
    execute ":0"
    " No modifications to this buffer
    setlocal nomodifiable nomodified
    " When we go to insert mode start a new buffer, and start insert
    nnoremap <buffer><silent> e :enew<CR>
    nnoremap <buffer><silent> i :enew <bar> startinsert<CR>
    nnoremap <buffer><silent> o :enew <bar> startinsert<CR>
endfun

" Run after "doing all the startup stuff"
autocmd VimEnter * call Start()


" RANGER ----------------------------------------------------------------------------------- {{{
let g:ranger_map_keys = 0
" }}}

" COMMENTER -------------------------------------------------------------------------------- {{{
" let g:NERDSpaceDelims = 1
let g:NERDCreateDefaulsMappings = 0
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
let g:NERDToggleCheckAllLines = 1
" }}}
